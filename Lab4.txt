public class Imagine extends AbstractElem {
	private String fileName;
	private Imagine newImg;
	
	Imagine(String fileN)
	{
		fileName = fileN;
		newImg = loadFromFile(fileN);
	}
	public void print() {
		System.out.println("File :"+fileName);
	}
	public Imagine loadFromFile(String path)
	{
		
		return null;
	}
}


public class Tabel {
	private String numeTabel;
	
	Tabel(String n)
	{
		numeTabel = n;
	}
	public void print() {
		System.out.println("Tabel,nume: "+numeTabel);
	}
	
	
}


public class Paragraf {
	private String text;
	
	Paragraf(String n)
	{
		text = n;
	}
	public void print() {
		System.out.println("Paragraf: "+text);
	}
	
}


public class Sectiune {
	private String text;
	
	Sectiune(String n)
	{
		text = n;
	}
	public void print() {
		System.out.println("Sectiune: "+text);
	}
}


public interface Element {
	public void add(Element elem) throws Exception;
	public void remove(Element el) throws Exception;
	public Element get(int i)throws Exception;
	public void print();
}	


public class AbstractElem implements Element {
	public void add(Element elem)
	{

	}
	public void remove(Element el) {
		
	}
	public Element get(int i) {
		
		return null;
	}
	public void print()
	{
		
	};
}


public class Main {

	public static void main(String[] args) {
		
	}

}


public class ImagineProxy extends AbstractElem{
	private String fileN;
	private Imagine realImg = null;
	public ImagineProxy(String fn) {
		this.fileN = fn;
	}
	public void print() {
		if(realImg == null){
			realImg = new Imagine(fileN);
		}
		realImg.print();
	}
}
